#!/bin/bash
REPOS=('main' 'multilib' 'lfs' 's6' 'runit')
PACCACHE=1
KEY=''

# system packages
whitelist=(
	'acl'
	'libacl'
	'acl-doc'
	'attr'
	'libattr'
	'attr-doc'
	'autoconf'
	'automake'
	'automake-doc'
	'bash'
	'libbash'
	'bash-doc'
	'bc'
	'binutils'
	'bison'
	'libbison'
	'bison-doc'
	'bzip2'
	'libbzip2'
	'bzip2-doc'
	'coreutils'
	'cromnix'
	'cromnix-buildtools'
	'cromnix-utils'
	'diffutils'
	'dosfstools'
	'e2fsprogs'
	'eudev'
	'eudev-openrc'
	'expat'
	'fakeroot'
	'file'
	'findutils'
	'flex'
	'gawk'
	'gcc'
	'gdbm'
	'gettext'
	'glibc'
	'gmp'
	'gperf'
	'grep'
	'groff'
	'grub'
	'gzip'
	'iana-etc'
	'inetutils'
	'intltool'
	'iproute2'
	'kbd'
	'kmod'
	'less'
	'libarchive'
	'libcap'
	'libpipeline'
	'libtool'
	'linux-api-headers'
	'm4'
	'make'
	'man-db'
	'man-pages'
	'mpc'
	'mpfr'
	'ncurses'
	'openrc'
	'pacman'
	'pacman-contrib'
	'patch'
	'perl'
	'perl-module-build'
	'perl-xml-parser'
	'pkg-config'
	'po4a'
	'procps-ng'
	'psmisc'
	'readline'
	'sed'
	'shadow'
	'sysklogd'
	'tar'
	'texinfo'
	'util-linux'
	'libutil-linux'
	'xz'
	'zlib'
)

shopt -s extglob

die() {
	echo ${@} 1>&2;
	exit 1;
}

usage() {
	printf "cromnix-repo\n\n"

	printf "Manage the local cromnix repo.\n\n"

	printf "Usage: /usr/bin/cromnix-repo [options]\n\n"

	printf "Options:\n"
	printf "  -h, --help     Display this help message.\n"
	printf "  -a, --add      Add packages to the repo from the out/pkg directory or from\n"
	printf "                 the PKGDEST directory from makepkg.conf.\n"
	printf "  -r, --rebuild  Rebuild the local repos.\n"
	printf "  -p, --paccache Remove old packages from the repo. Has an optional argument\n"
	printf "                 which leaves 'n' packages in the repo. Default is 1.\n"
	printf "  -s, --srccache Remove old sources from the repo. Has an optional argument\n"
	printf "                 which leaves 'n' sources in the repo. Default is 1.\n"
	printf "  -k, --key      (Optional) Key used to sign packages and repo.\n"

	exit 0;
}

in_array() {
	local element
	for element in "${@:2}"; do
		[[ "$element" == "$1" ]] && return 0;
	done
	return 1
}

addpackages() {
	repo_main=()
	repo_multilib=()
	repo_lfs=()
	repo_s6=()
	repo_runit=()

	PKGDEST="${PWD}"
	# let's see where the package that was compile is stored
	. /etc/makepkg.conf

	# add the files to the repo and move them
	if [ -d ./out/srcpkg ]; then
		pushd ./out/srcpkg > /dev/null
		for file in $(find ./ -maxdepth 1 -type f -not -name '*.sig' | sort -V  | grep 'src.tar.gz\|src.tar.xz'); do
			file="$(basename "$(test -L "${file}" && readlink "${file}" || echo "${file}")")"
			cp "${file}" "/var/lib/cromnix-sources/${file}"
			if [ -f "${file}.sig" ]; then
				rm "${file}.sig"
			fi
			if [ ! "${KEY}" == '' ]; then
				arg="-u ${KEY}"
			fi
			gpg ${arg} -b "${file}"
			cp "${file}.sig" "/var/lib/cromnix-sources/${file}.sig"
		done
		popd > /dev/null
	fi
	if [ -d ./out/pkg ]; then
		cd ./out/pkg
	else
		cd "${PKGDEST}"
	fi

	# get a list of the packages and sort them into repos
	for file in $(find ./ -maxdepth 1 -type f -not -name '*.sig' | sort -V  | grep 'pkg.tar.gz\|pkg.tar.xz'); do
		file="$(basename "$(test -L "${file}" && readlink "${file}" || echo "${file}")")"
		pkgname=${file%-*-*-*.pkg.tar.xz}
		in_array ${pkgname} "${whitelist[@]}"
		if [ "$?" -eq 0 ]; then
			# This could be used to split off a core repo
			repo_main+=("${file}")
		else
			case "${file}" in
				*-lfs*.pkg.tar.@(gz|xz)) repo_lfs+=("${file}");;
				runit*.pkg.tar.@(gz|xz)) repo_runit+=("${file}");;
				*-runit*.pkg.tar.@(gz|xz)) repo_runit+=("${file}");;
				lfs-bootscripts*.pkg.tar.@(gz|xz)) repo_lfs+=("${file}");;
				blfs-bootscripts*.pkg.tar.@(gz|xz)) repo_lfs+=("${file}");;
				s6*.pkg.tar.@(gz|xz)) repo_s6+=("${file}");;
				execline*.pkg.tar.@(gz|xz)) repo_s6+=("${file}");;
				skalibs*.pkg.tar.@(gz|xz)) repo_s6+=("${file}");;
				*-multilib*.pkg.tar.@(gz|xz)) repo_multilib+=("${file}");;
				*lib32-*.pkg.tar.@(gz|xz)) repo_multilib+=("${file}");;
				* ) repo_main+=("${file}");;
			esac
		fi
	done

	if [ ${#repo_main[@]} -gt 0 ]; then
		addpackages_repo main ${repo_main[@]}
	fi
	if [ ${#repo_multilib[@]} -gt 0 ]; then
		addpackages_repo multilib ${repo_multilib[@]}
	fi
	if [ ${#repo_lfs[@]} -gt 0 ]; then
		addpackages_repo lfs ${repo_lfs[@]}
	fi
	if [ ${#repo_s6[@]} -gt 0 ]; then
		addpackages_repo s6 ${repo_s6[@]}
	fi
	if [ ${#repo_runit[@]} -gt 0 ]; then
		addpackages_repo runit ${repo_runit[@]}
	fi
}

addpackages_repo() {
	for file in "${@:2}"; do
		cp "${file}" "/var/lib/cromnix-repo/${1}/x86_64/${file}"
		if [ -f "${file}.sig" ]; then
			rm "${file}.sig"
		fi
		if [ ! "${KEY}" == '' ]; then
			arg="-u ${KEY}"
		fi
		gpg ${arg} -b "${file}"
		cp "${file}.sig" "/var/lib/cromnix-repo/${1}/x86_64/${file}.sig"
	done
	pushd "/var/lib/cromnix-repo/${1}/x86_64" > /dev/null
	if [ ! "${KEY}" == '' ]; then
		arg="-k ${KEY}"
	fi
	#repo-add --sign ${arg} -d "${1}.db.tar.xz" "${@:2}"
	repo-add -d "${1}.db.tar.xz" "${@:2}"
	popd > /dev/null
}

rebuildrepo() {
	for REPO in "${REPOS[@]}"; do
		echo "Rebuilding ${REPO}..."
		cd "/var/lib/cromnix-repo/${REPO}/x86_64"

		# backup the old database
		if [ -e "${REPO}.db.tar.xz" ]; then
			mv "${REPO}.db.tar.xz" "${REPO}.db.tar.xz.bkp"
		fi
		if [ -h "${REPO}.db" ]; then
			rm "${REPO}.db"
		fi
		if [ -e "${REPO}.files.tar.xz" ]; then
			mv "${REPO}.files.tar.xz" "${REPO}.files.tar.xz.bkp"
		fi
		if [ -h "${REPO}.files" ]; then
			rm "${REPO}.files"
		fi

		# delete deltas for later regeneration
		for file in $(find ./ -maxdepth 1 -type f -name '*.delta'); do
			rm "${file}"
		done

		# get a list of all hte packages
		packages=()
		for file in $(find ./ -maxdepth 1 -type f -not -name '*.sig' | sort -V | grep '.pkg.tar.gz\|.pkg.tar.xz'); do
			packages+=("${file}")
		done

		if [ ! "${KEY}" == '' ]; then
			arg="-k ${KEY}"
		fi
		#repo-add -q --sign ${arg} -d "${REPO}.db.tar.xz" "${packages[@]}"
		repo-add -q -d "${REPO}.db.tar.xz" "${packages[@]}"

		# rotate in the old database files
		if [ -e "${REPO}.db.tar.xz.bkp" ]; then
			mv "${REPO}.db.tar.xz.bkp" "${REPO}.db.tar.xz.old"
		fi
		if [ -e "${REPO}.files.tar.xz.bkp" ]; then
			mv "${REPO}.files.tar.xz.bkp" "${REPO}.files.tar.xz.old"
		fi
	done
}

cleanrepo() {
	if ! [[ ${PACCACHE} =~ ^[0-9]+$ ]] || [ ${PACCACHE} -le 0 ]; then
		die "The option for --paccache must be numeric and greater than 0."
	fi
	for REPO in "${REPOS[@]}"; do
		echo "Cleaning ${REPO}..."
		if [ $(ls -1 "/var/lib/cromnix-repo/${REPO}/x86_64" | wc -l) -gt 0 ]; then
			paccache -rv -k${PACCACHE} -c "/var/lib/cromnix-repo/${REPO}/x86_64"
		fi
	done
}

cleansource() {
	if ! [[ ${PACCACHE} =~ ^[0-9]+$ ]] || [ ${PACCACHE} -le 0 ]; then
		die "The option for --srccache must be numeric and greater than 0."
	fi
	if [ -d /var/lib/cromnix-sources ]; then
		cd /var/lib/cromnix-sources
		package=''
		files=()
		for file in $(find ./ -maxdepth 1 -type f -not -name '*.sig' | sort -Vr | grep '.src.tar.gz\|.src.tar.xz'); do
			file="$(basename "$(test -L "${file}" && readlink "${file}" || echo "${file}")")"
			pkgname="${file%-*}"
			pkgver="${pkgname##*-}"
			pkgname="${pkgname%-*}"
			pkgrel=$(echo "${file##*-}" | sed 's|.src.tar.xz||; s|.src.tar.gz||')
			if [ "${package}" == "${pkgname}" ]; then
				if [ ${PACCACHE} -le ${n} ]; then
					files+=("${file}")
				fi
				n=$(($n + 1))
			else
				n=1
				package="${pkgname}"
			fi
		done
		if [ ${#files[@]} -eq 0 ]; then
			echo "There are no sources to remove"
		else
			rm -vf "${files[@]}"
		fi
	else
		echo "There are no sources to remove"
	fi
}

if [ "${EUID}" -eq 0 ]; then
	die 'This script cannot be run as root!';
fi

TEMP=$(getopt -o 'hark:dp::s::' -l 'help,add,rebuild,key:,paccache::,srccache::' -n 'cromnix-repo' -- "$@")
if [ $? -ne 0 ]; then
	usage
fi

eval set -- "${TEMP}"
unset TEMP

while true; do
	case "${1}" in
		'-h'|'--help')
			usage
			shift
			continue
		;;
		'-a'|'--add')
			addpackages
			exit 0
			shift
			continue
		;;
		'-r'|'--rebuild')
			rebuildrepo
			exit 0
			shift
			continue
		;;
		'-k'|'--key')
			case "${2}" in
				*)
					KEY=${2}
				;;
			esac
			shift 2
			continue
		;;
		'-p'|'--paccache')
			case "${2}" in
				'')
					cleanrepo
					exit 0
				;;
				*)
					PACCACHE=${2}
					cleanrepo
					exit 0
				;;
			esac
			shift 2
			continue
		;;
		'-s'|'--srccache')
			case "${2}" in
				'')
					cleansource
					exit 0
				;;
				*)
					PACCACHE=${2}
					cleansource
					exit 0
				;;
			esac
			shift 2
			continue
		;;
		'--')
			shift
			break
		;;
		*)
			die 'Internal error!'
		;;
	esac
done

usage
